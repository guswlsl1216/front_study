.parent {
  border: 1px solid red;
  height: 500px;
  display: flex;   
  /* 부모한테 flex 지정해주면 flex 박스가 되어버림*/
  /* 자식 요소들을 정렬할 수 있음*/

  /*space-around : 일정하게 간격 조절 후 가운데 정렬*/
  /*space-between : 좌우 여백 없이 간격 조절 후 가운데 정렬*/
  justify-content: space-between;

  /*자식 요소들을 세로 정렬 - flex-start, flex-end*/
  align-items: center;
}

/* flex 박스에 자식으로 있는 요소는 
  높이를 설정하지 않으면 부모 크기에 맞춰짐

*/
.child {
  background: pink;
  width: 100px;
  height: 100px;
}

.parent2 {
  border: 1px solid red;
  width: 500px;
  height: 500px;

    display: flex;
    justify-content: center;
    align-items: center;
    /*정렬을 하지 않으면 그냥 부모 크기에 맞춰진다*/

    /*자식의 높이가 없으면 설정되지 않음*/
}

.child2 {
  width: 100px;
  height: 100px;
  background: skyblue;
}


.parent3 {
  border: 1px solid red;
  height: 500px;

  display: flex;
  flex-direction: column - reverse;
  /* flex를 거는 순간 아이템(자식)들이 바뀜 */
  /* 기본 값이 row여서 설정 안해도 가로 배치 된거임 */
  /* row-reverse : 가로 역방향 배치 */
  /* column : 세로 배치 */
  /* column - reverse : 세로 역방향 배치 */
}

.child3 {
  width: 100px;
  height: 100px;
  background: pink;
}

.parent4 {
  border: 1px solid red;
  height: 600px;

  display: flex;
  /* 부모 크기에 맞춰서 넣을건지 줄바꿈할건지 설정*/
  /* nowrap(기본값) : 줄바꿈 안함 -> 자식 크기가 줄어듦*/
  /* wrap : 줄바꿈 함 - 창 크기에 맞춰서 줄바꿈을 해줌*/
  /* wrap-reverse : 거꾸로! */
  /* flex-wrap: wrap-reverse; */

  /* 배치 방향과 줄바꿈은 하나의 속성으로 처리가 가능함 */
  flex-flow: row wrap; /* (순서는 상관 없음) */

  /*즉, wrap일 경우 자식들 간격 설정 가능 height로 벌어짐*/
  align-content: space-around;
}

.parent4 > div {
  width: 100px;
  height: 100px;
  background: yellowgreen;
  margin: 5px;
}

/*속성을 부모한테 걸어서 하는 애들임 */

